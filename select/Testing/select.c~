                	//printf("PASS\tEMPTY PLAYER SLOT FOUND\n");//DEBUGGING
                	
                    players[i].client_socket = new_socket;
                    
                    players[i].sessionID = rand() % 10000;
                    //int unique = TRUE;
                    
                    //printf("PASS\tINITIAL SESSION ID CREATED : %d\n", players[i].sessionID);//DEBUGGING
                    
                    //CHECK IF SESSION ID IS UNIQUE 
                   	//do
                   	//{
						//for (int checker = 0; checker < max_players; checker++) 
						//{
							//if(players[i].sessionID == players[checker].sessionID && players[i].ID != players[checker].ID) 
							//{
								//unique = FALSE;
								//printf("ERROR\tCOPY FOUND\n");//DEBUGGING
								//printf("ERROR\tPLAYER:%d \t CHECKER:%d\n", players[i].sessionID, players[checker].sessionID);//DEBUGGING
							//}
						//}
						
						//printf("PASS\tCOPY NOT FOUND\n");//DEBUGGING
						
                    //} while(!unique);
				    
                   // printf("PASS\tSESSION ID %d HAS BEEN ESTABLISHED \n", players[i].sessionID);
                    
					players[i].state = 1; // INACTIVE STATE
					
				    // SEND INITIAL MESSAGE - CHECK RETURN IS LENGTH OF STRING
				    
				    snprintf(buffer, sizeof(buffer), "%d %d", players[i].sessionID, players[i].state);
				    
				    printf("PASS\tBUFFER:%s\n", buffer);
				    
				    
				    //if(send(new_socket, buffer, strlen(buffer), 0) != strlen(buffer) ) 
				    //{
				        //perror("ERROR\tSEND ERROR\n");
				    //}else{printf("PASS\tINITIAL MESSAGE SEND TO SOCKET %d\n", new_socket);}
