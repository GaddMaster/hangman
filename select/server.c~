#include <netinet/in.h>
#include <sys/socket.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <unistd.h>
#include <sys/select.h>
#include <sys/time.h>

int main(){
	
	int server_socket;
	
	server_socket = socket(AF_INET, SOCK_STREAM, 0);
	
	if(server_socket){
		printf("Server Socket ID : %d\n", server_socket);
		return 0;
		}
	
	struct sockaddr_in	client_addr;
	struct sockaddr_in	server_addr;
	
	bzero(&server_addr, sizeof(server_addr));
	server_addr.sin_family      = AF_INET;
	server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	servaddr.sin_port        = htons(SERV_PORT);
 	
 	if(bind(server_socket, (struct sockaddr *)&server_addr, sizeof(server_addr))){
 		printf("Bind Error");
 		return 0;
 	}
 	
 	listen(server_socket, SOMAXCONN);
 	
 	fd_set master;
 	FD_ZERO(&master);
 	
 	FD_SET(server_socket, &master);
 	
 	bool running = true;
 	
 	while(running){
 	
 		fd_set copy = master;
 		
 		//struct timeval * timeOut;
 		//timeOut.tv_sec = 0;
 		//timeOut.tv_usec = 0;
 		
 		int socketCount = select(0, &copy, NULL, NULL, NULL);
 		
 		printf("Socket Count : %d", socketCount);
 		
 		for(int x = 0; x < socketCount; x++){hi
 		
 			
 			if(socket == server_socket){
 			
 				int client = accept(server_socket, NULL, NULL);
 				
 				FD_SET(client, &master);
 				
 				char welcome_message[] = "Welcome Client\r\n";
 				send(client, welcome_message, sizeof(welcome_message) + 1, 0);
 			
 			}
 			else{
 			
 				char buffer[4096];
 				memset(buffer, 0, 4096);
 				
 				int byteIn = recv(socket, buffer, 4096, 0);
 				
 				if(byteIn <= 0){
 				
 					close(socket);
 					FD_CLR(socket, &master);
 				
 				}
 				else{
 					
 					for(int y = 0; y < master.fd_count; y++){
 					
 						int out_socket = master.fd_array[y];
 						
 						if(out_socket != server_socket && out_socket != socket){
 						
 							char message[] = "Success ";
 						
 							printf("Socket %d : \tBuffer : %s", socket, buffer);
 							
 							send(out_socket, return_message.c_str(), return_message.size() + 1, 0);
 						
 						}
 						
 					}
 				
 				}
 			
 			}
 		
 		}
 	
 	}
 	
 	FD_CLR(server_socket, &master);
 	
 	closesocket(server_socket);
 	
 	printf("Shutting Down Server\n");
 	
 	return 0;

}











